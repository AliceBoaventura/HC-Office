import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';

@Component({
  selector: 'app-cadastro-direito-autoral',
  template: `
    <form [formGroup]="form" (ngSubmit)="salvar()" class="formulario">
      <h2>Cadastro de Direito Autoral</h2>

      <fieldset formGroupName="Detalhes">
        <legend>Detalhes</legend>

        <label>
          Processo:
          <input formControlName="Processo" />
          <span class="erro" *ngIf="campoInvalido(detalhes.Processo)">Obrigatório</span>
        </label>

        <label>
          Título:
          <input formControlName="DireitoAutoral" />
          <span class="erro" *ngIf="campoInvalido(detalhes.DireitoAutoral)">Obrigatório</span>
        </label>

        <label>
          Órgão:
          <input formControlName="OrgaoRegistro" />
        </label>

        <label>
          Situação:
          <input formControlName="SituacaoProcesso" />
        </label>
      </fieldset>

      <fieldset formGroupName="DatasProcesso">
        <legend>Datas</legend>

        <label>
          Data Depósito:
          <input type="date" formControlName="DataDeposito" />
        </label>

        <label>
          Data Registro:
          <input type="date" formControlName="DataRegistro" />
        </label>
      </fieldset>

      <fieldset formGroupName="DadosGerais">
        <legend>Dados Gerais</legend>

        <label>
          Pasta Referência:
          <input formControlName="PastaReferencia" />
        </label>

        <label>
          Responsável:
          <input formControlName="Responsavel" />
        </label>
      </fieldset>

      <button type="submit" [disabled]="form.invalid || carregando">Salvar</button>

      <div *ngIf="mensagem" class="mensagem">{{ mensagem }}</div>
    </form>
  `,
  styles: [`
    .formulario {
      max-width: 600px;
      margin: 20px auto;
      padding: 20px;
      border: 1px solid #ccc;
      border-radius: 8px;
      font-family: Arial, sans-serif;
      background: #f9f9f9;
    }

    fieldset {
      border: 1px solid #ccc;
      padding: 15px;
      margin-bottom: 15px;
    }

    legend {
      font-weight: bold;
      padding: 0 10px;
    }

    label {
      display: block;
      margin-bottom: 10px;
    }

    input {
      width: 100%;
      padding: 6px;
      box-sizing: border-box;
    }

    .erro {
      color: red;
      font-size: 0.8em;
      display: block;
    }

    .mensagem {
      margin-top: 15px;
      color: green;
      font-weight: bold;
    }

    button {
      margin-top: 15px;
      padding: 10px 16px;
      font-size: 1em;
      background-color: #1976d2;
      color: white;
      border: none;
      border-radius: 4px;
    }

    button:disabled {
      background-color: #999;
    }
  `]
})
export class CadastroDireitoAutoralComponent {
  form: FormGroup;
  carregando = false;
  mensagem = '';

  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({
      Detalhes: this.fb.group({
        Processo: ['', Validators.required],
        DireitoAutoral: ['', Validators.required],
        OrgaoRegistro: [''],
        SituacaoProcesso: ['']
      }),
      DatasProcesso: this.fb.group({
        DataDeposito: [''],
        DataRegistro: ['']
      }),
      DadosGerais: this.fb.group({
        PastaReferencia: [''],
        Responsavel: ['']
      })
    });
  }

  // Getters para facilitar o acesso no template
  get detalhes() {
    return this.form.get('Detalhes') as FormGroup;
  }

  get datasProcesso() {
    return this.form.get('DatasProcesso') as FormGroup;
  }

  get dadosGerais() {
    return this.form.get('DadosGerais') as FormGroup;
  }

  campoInvalido(control: AbstractControl | null): boolean {
    return !!control && control.invalid && (control.dirty || control.touched);
  }

  salvar(): void {
    if (this.form.invalid) {
      this.form.markAllAsTouched();
      return;
    }

    this.carregando = true;
    const dados = this.form.value;

    // Aqui você poderia chamar um serviço HTTP (via service)
    console.log('Salvando dados:', dados);

    // Simula requisição
    setTimeout(() => {
      this.carregando = false;
      this.mensagem = 'Cadastro salvo com sucesso!';
      this.form.reset();
    }, 1000);
  }
}
